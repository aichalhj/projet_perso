[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Code\nimport requests\nimport json\nimport pandas as pd\nimport datetime\nfrom IPython.display import HTML\nfrom IPython.display import display\nimport numpy as np\n\n\n#Obtenez la date actuelle.\ndate_actuelle = datetime.date.today()\n\n# Calculez la date de fin (5 jours à partir de la date actuelle).\ndate_fin = date_actuelle + datetime.timedelta(days=5)\n\n# Formattez les dates au format AAAA-MM-JJ.\ndate_debut_str = date_actuelle.strftime('%Y-%m-%d')\ndate_fin_str = date_fin.strftime('%Y-%m-%d')\n\n# Construisez l'URL avec les dates mises à jour.\nbase_url = 'https://api.open-meteo.com/v1/meteofrance?latitude=43.6109&longitude=3.8763&current=temperature_2m,rain&hourly=temperature_2m,relativehumidity_2m,precipitation,snowfall,windspeed_10m&daily=weathercode,sunrise,sunset&timezone=Europe%2FBerlin&start_date=2023-10-31&end_date=2023-11-04'\nmeteo_url = f'{base_url}&start_date={date_debut_str}&end_date={date_fin_str}'\n\nresponse = requests.get(meteo_url)\n\nif response.status_code == 200:\n    data = response.json()\n    #Création Dataframe\n    df_data=pd.DataFrame(data)\n    pd.set_option('display.max_rows',None)\n    #Création d'un CSV associé\n    df_data.to_csv('df_data.csv',index=False)\n    #Extraction des données\n    temp = data[0]['hourly']['temperature_2m']\n    windspeed = data[0]['hourly']['windspeed_10m']\n    sunset = data[0]['daily']['sunset']\n    rain = data[0]['hourly']['precipitation']\n    sunrise = data[0]['daily']['sunrise']\n    humidity = data[0]['hourly']['relativehumidity_2m']\n    snow=data[0]['hourly']['snowfall']\n# Formatez les dates de sunrise et sunset au format '%H:%M'\nfor i in range (5):\n    sunrise[i] = datetime.datetime.strptime(data[0]['daily']['sunrise'][i], '%Y-%m-%dT%H:%M').strftime('%H:%M')\n    sunset[i] = datetime.datetime.strptime(data[0]['daily']['sunset'][i], '%Y-%m-%dT%H:%M').strftime('%H:%M')\n\n\ntabtemp= np.zeros((5,24))\nk=0\nfor i in range (5):\n    for j in range(24):\n        tabtemp[i,j]=temp[k]\n        k+=1\ntempmin=np.zeros(5)\ntempmax=np.zeros(5)\nfor i in range (5):\n    tempmin[i]=min(tabtemp[i])\n    tempmax[i]=max(tabtemp[i])\n\nmin_length = min(len(tempmax), len(tempmin), len(windspeed), len(sunrise), len(sunset))\ntempmax = tempmax[:min_length]\ntempmin = tempmin[:min_length]\nwindspeed = windspeed[:min_length]\nsunset = sunset[:min_length]\nrain=rain[:min_length]\nsunrise=sunrise[:min_length]\n\ndef inttoday(i):\n    if ((datetime.datetime.now().weekday()+ i)%7 ==0):\n        return 'Lundi'\n    elif ((datetime.datetime.now().weekday()+ i)%7 ==1):\n        return 'Mardi'\n    elif ((datetime.datetime.now().weekday()+ i)%7 ==2):\n        return 'Mercredi'\n    elif ((datetime.datetime.now().weekday()+ i)%7 ==3):\n        return 'Jeudi'\n    elif ((datetime.datetime.now().weekday()+ i)%7 ==4):\n        return 'Vendredi'\n    elif ((datetime.datetime.now().weekday()+ i)%7 ==5):\n        return 'Samedi'\n    else:\n        return 'Dimanche'\ninttoday(i)\n\n# Créez une liste des jours de la semaine correspondant à chaque date\njours_semaine = [inttoday(i) for i in range(min_length)]\n\ncode_meteo = data[0]['daily']['weathercode']\n\ncondition_image = {\n    0: {'condition': 'Ciel dégagé', 'image': 'sun.svg'},\n    1: {'condition': 'Ciel dégagé', 'image': 'sun.svg'},\n    2: {'condition': 'Ciel partiellement nuageux', 'image': 'Nuageux.svg'},\n    3: {'condition': 'Ciel couvert', 'image': 'couvert.svg'},\n    45: {'condition': 'Brouillard', 'image': 'brouillard.svg'},\n    48: {'condition': 'Brouillard givré', 'image': 'brouillard.svg'},\n    51: {'condition': 'Bruine : Intensité légère', 'image': 'bruine.svg'},\n    53: {'condition': 'Bruine : Intensité modérée', 'image': 'bruine.svg'},\n    55: {'condition': 'Bruine : Intensité dense', 'image': 'bruine.svg'},\n    56: {'condition': 'Bruine verglaçante : Intensité légère', 'image': 'bruine_verglaçante.svg'},\n    57: {'condition': 'Bruine verglaçante : Intensité dense', 'image': 'bruine_verglaçante.svg'},\n    61: {'condition': 'Pluie légère', 'image': 'pluie_legere.svg'},\n    63: {'condition': 'Pluie modérée', 'image': 'pluie_moderee.svg'},\n    65: {'condition': 'Pluie forte', 'image': 'pluie_forte.svg'},\n    66: {'condition': 'Pluie verglaçante', 'image': 'pluie_forte.svg'},\n    71: {'condition': 'Neige', 'image': 'neige.svg'},\n    73: {'condition': 'Neige', 'image': 'neige.svg'},\n    75: {'condition': 'Neige', 'image': 'neige.svg'},\n    80: {'condition': 'Averse légère', 'image': 'averse_legere.svg'},\n    81: {'condition': 'Averse moyenne', 'image': 'averse_moyen.svg'},\n    82: {'condition': 'Averse forte', 'image': 'averse_forte.svg'},\n    95: {'condition': 'Orage', 'image': 'orage.svg'},\n    96: {'condition': 'Orage et grêle', 'image': 'grele.svg'},\n    99: {'condition': 'Orage et grêle', 'image': 'grele.svg'}\n}\n\ndef get_weather_image(i):\n    if code_meteo[i]==0 or code_meteo[i]==1:\n        return f'&lt;img src=\"imagemeteo/soleil(2).svg\"  width=50 height=50/&gt;'\n    elif code_meteo[i]==2 or code_meteo[i]==3:\n        return f'&lt;img src=\"imagemeteo/couvert.svg\" width=50 height=50/&gt;'\n    elif code_meteo[i]==45 or code_meteo[i]==48: \n        return f'&lt;img src=\"imagemeteo/brouillard.svg\" width=50 height=50/&gt;'\n    elif code_meteo[i]==51 or code_meteo[i]==53 or code_meteo[i]==55 or code_meteo[i]==56  or code_meteo[i]==57: \n        return f'&lt;img src=\"imagemeteo/bruine.svg\" width=50 height=50/&gt;'\n    elif code_meteo[i]==61 or code_meteo[i]==63: \n        return f'&lt;img src=\"imagemeteo/pluie (2).svg\" width=50 height=50/&gt;'\n    elif code_meteo[i]==65 or code_meteo[i]==66: \n        return f'&lt;img src=\"imagemeteo/pluie_forte.svg\" width=50 height=50/&gt;'\n    elif code_meteo[i]==71 or code_meteo[i]==73 or code_meteo[i]==75:\n        return f'&lt;img src=\"imagemeteo/neige.svg\" width=50 height=50/&gt;'\n    elif code_meteo[i]==80 or code_meteo[i]==81 or code_meteo[i]==82:\n        return f'&lt;img src=\"imagemeteo/averse.svg\" width=50 height=50/&gt;'\n    elif code_meteo[i]==95:\n        return f'&lt;img src=\"imagemeteo/orage(2).svg\" width=50 height=50/&gt;'\n    elif code_meteo[i]==96 or code_meteo[i]==99:\n        return f'&lt;img src=\"imagemeteo/grele.svg\" width=50 height=50/&gt;'\n    else:\n        return f\"image non trouvée\"\n#Créez une liste des icones \nicone=[get_weather_image(i) for i in range(min_length)]\n\n# Créez un DataFrame pour l'affichage avec la date et le jour de la semaine dans une seule colonne\ndf_display = pd.DataFrame({\n    'Date': [f'{date.strftime(\"%d/%m/%Y\")}- {jour}' for date, jour in zip(pd.date_range(date_debut_str, periods=min_length).date, jours_semaine)],\n    'Icone': icone,\n     'Température Maximale': [f'{tempmax} °C' for tempmax in tempmax],\n     'Température Minimale': [f'{tempmin} °C' for tempmin in tempmin],\n     'Lever du Soleil': sunrise,\n     'Vitesse du Vent Maximale': [f'{windspeed} km/h' for windspeed in windspeed],\n     'Coucher du Soleil': sunset,\n     'Précipitation': [f'{rain} mm' for rain in rain]\n})\n\n# Effectuez la transposition du DataFrame pour échanger les lignes et les colonnes\ndf_display_transposed = df_display.T\n\n# Générez le code HTML du tableau avec la date et le jour de la semaine\ntable_html = df_display_transposed.to_html(classes=['table'], escape=False, header=False)\n\n# Affichez le tableau en tant que HTML\ndisplay(HTML(table_html))\n\n\n\n\n\nDate\n01/07/2024- Lundi\n02/07/2024- Mardi\n03/07/2024- Mercredi\n04/07/2024- Jeudi\n05/07/2024- Vendredi\n\n\nIcone\nimage non trouvée\nimage non trouvée\nimage non trouvée\nimage non trouvée\nimage non trouvée\n\n\nTempérature Maximale\nnan °C\nnan °C\nnan °C\nnan °C\nnan °C\n\n\nTempérature Minimale\nnan °C\nnan °C\nnan °C\nnan °C\nnan °C\n\n\nLever du Soleil\n08:18\n08:19\n08:21\n08:22\n08:23\n\n\nVitesse du Vent Maximale\nNone km/h\nNone km/h\nNone km/h\nNone km/h\nNone km/h\n\n\nCoucher du Soleil\n18:37\n18:36\n18:34\n18:33\n18:32\n\n\nPrécipitation\nNone mm\nNone mm\nNone mm\nNone mm\nNone mm\n\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Prévisions Météo",
    "section": "",
    "text": "Vous retrouverez ici, la météo de la ville de Montpellier du jour et des quatres prochains jours.\n\n\nCode\nimport requests\nimport json\nimport pandas as pd\nimport datetime\nfrom IPython.display import HTML\nfrom IPython.display import display\nimport numpy as np\n\n\n#Obtenez la date actuelle.\ndate_actuelle = datetime.date.today()\n\n# Calculez la date de fin (5 jours à partir de la date actuelle).\ndate_fin = date_actuelle + datetime.timedelta(days=5)\n\n# Formattez les dates au format AAAA-MM-JJ.\ndate_debut_str = date_actuelle.strftime('%Y-%m-%d')\ndate_fin_str = date_fin.strftime('%Y-%m-%d')\n\n# Construisez l'URL avec les dates mises à jour.\nbase_url = 'https://api.open-meteo.com/v1/meteofrance?latitude=43.6109&longitude=3.8763&current=temperature_2m,rain&hourly=temperature_2m,relativehumidity_2m,rain,snowfall,windspeed_10m&daily=weathercode,sunrise,sunset,precipitation_sum&timezone=Europe%2FBerlin&start_date=2023-11-08&end_date=2023-11-12'\nmeteo_url = f'{base_url}&start_date={date_debut_str}&end_date={date_fin_str}'\n\nresponse = requests.get(meteo_url)\n\nif response.status_code == 200:\n    data = response.json()\n    #Création Dataframe\n    df_data=pd.DataFrame(data)\n    pd.set_option('display.max_rows',None)\n    #Création d'un CSV associé\n    df_data.to_csv('df_data.csv',index=False)\n    #Extraction des données\n    temp = data[0]['hourly']['temperature_2m']\n    windspeed = data[0]['hourly']['windspeed_10m']\n    sunset = data[0]['daily']['sunset']\n    rain = data[0]['daily']['precipitation_sum']\n    sunrise = data[0]['daily']['sunrise']\n    humidity = data[0]['hourly']['relativehumidity_2m']\n    snow=data[0]['hourly']['snowfall']\n\n    # Remplacer les valeurs manquantes par \"-\" pour les autres variables\n    rain = [precipitation if not pd.isna(\n        precipitation) else \"-\" for precipitation in rain]\n\n# Formatez les dates de sunrise et sunset au format '%H:%M'\nfor i in range (5):\n    sunrise[i] = datetime.datetime.strptime(data[0]['daily']['sunrise'][i], '%Y-%m-%dT%H:%M').strftime('%H:%M')\n    sunset[i] = datetime.datetime.strptime(data[0]['daily']['sunset'][i], '%Y-%m-%dT%H:%M').strftime('%H:%M')\n\n\ntabtemp= np.zeros((5,24))\nk=0\nfor i in range (5):\n    for j in range(24):\n        tabtemp[i,j]=temp[k]\n        k+=1\ntempmin=np.zeros(5)\ntempmax=np.zeros(5)\nfor i in range (5):\n    tempmin[i]=min(tabtemp[i])\n    tempmax[i]=max(tabtemp[i])\n\nmin_length = min(len(tempmax), len(tempmin), len(windspeed), len(sunrise), len(sunset))\ntempmax = tempmax[:min_length]\ntempmin = tempmin[:min_length]\nwindspeed = windspeed[:min_length]\nsunset = sunset[:min_length]\nrain=rain[:min_length]\nsunrise=sunrise[:min_length]\n\ndef inttoday(i):\n    if ((datetime.datetime.now().weekday()+ i)%7 ==0):\n        return 'Lundi'\n    elif ((datetime.datetime.now().weekday()+ i)%7 ==1):\n        return 'Mardi'\n    elif ((datetime.datetime.now().weekday()+ i)%7 ==2):\n        return 'Mercredi'\n    elif ((datetime.datetime.now().weekday()+ i)%7 ==3):\n        return 'Jeudi'\n    elif ((datetime.datetime.now().weekday()+ i)%7 ==4):\n        return 'Vendredi'\n    elif ((datetime.datetime.now().weekday()+ i)%7 ==5):\n        return 'Samedi'\n    else:\n        return 'Dimanche'\ninttoday(i)\n\n# Créez une liste des jours de la semaine correspondant à chaque date\njours_semaine = [inttoday(i) for i in range(min_length)]\n\ncode_meteo = data[0]['daily']['weathercode']\n\ncondition_image = {\n    0: {'condition': 'Ciel dégagé', 'image': 'sun.svg'},\n    1: {'condition': 'Ciel dégagé', 'image': 'sun.svg'},\n    2: {'condition': 'Ciel partiellement nuageux', 'image': 'Nuageux.svg'},\n    3: {'condition': 'Ciel couvert', 'image': 'couvert.svg'},\n    45: {'condition': 'Brouillard', 'image': 'brouillard.svg'},\n    48: {'condition': 'Brouillard givré', 'image': 'brouillard.svg'},\n    51: {'condition': 'Bruine : Intensité légère', 'image': 'bruine.svg'},\n    53: {'condition': 'Bruine : Intensité modérée', 'image': 'bruine.svg'},\n    55: {'condition': 'Bruine : Intensité dense', 'image': 'bruine.svg'},\n    56: {'condition': 'Bruine verglaçante : Intensité légère', 'image': 'bruine_verglaçante.svg'},\n    57: {'condition': 'Bruine verglaçante : Intensité dense', 'image': 'bruine_verglaçante.svg'},\n    61: {'condition': 'Pluie légère', 'image': 'pluie_legere.svg'},\n    63: {'condition': 'Pluie modérée', 'image': 'pluie_moderee.svg'},\n    65: {'condition': 'Pluie forte', 'image': 'pluie_forte.svg'},\n    66: {'condition': 'Pluie verglaçante', 'image': 'pluie_forte.svg'},\n    71: {'condition': 'Neige', 'image': 'neige.svg'},\n    73: {'condition': 'Neige', 'image': 'neige.svg'},\n    75: {'condition': 'Neige', 'image': 'neige.svg'},\n    80: {'condition': 'Averse légère', 'image': 'averse_legere.svg'},\n    81: {'condition': 'Averse moyenne', 'image': 'averse_moyen.svg'},\n    82: {'condition': 'Averse forte', 'image': 'averse_forte.svg'},\n    95: {'condition': 'Orage', 'image': 'orage.svg'},\n    96: {'condition': 'Orage et grêle', 'image': 'grele.svg'},\n    99: {'condition': 'Orage et grêle', 'image': 'grele.svg'}\n}\n\ndef get_weather_image(i):\n    if code_meteo[i]==0 or code_meteo[i]==1:\n        return f'&lt;div style=\"text-align: center;\"&gt;&lt;img src=\"imagemeteo/soleil(2).svg\"  width=50 height=50/&gt;'\n    elif code_meteo[i]==2 or code_meteo[i]==3:\n        return f'&lt;div style=\"text-align: center;\"&gt;&lt;img src=\"imagemeteo/couvert.svg\" width=50 height=50/&gt;'\n    elif code_meteo[i]==45 or code_meteo[i]==48: \n        return f'&lt;div style=\"text-align: center;\"&gt;&lt;img src=\"imagemeteo/brouillard.svg\" width=50 height=50/&gt;'\n    elif code_meteo[i]==51 or code_meteo[i]==53 or code_meteo[i]==55 or code_meteo[i]==56  or code_meteo[i]==57: \n        return f'&lt;div style=\"text-align: center;\"&gt;&lt;img src=\"imagemeteo/bruine.svg\" width=50 height=50/&gt;'\n    elif code_meteo[i]==61 or code_meteo[i]==63: \n        return f'&lt;div style=\"text-align: center;\"&gt;&lt;img src=\"imagemeteo/pluie (2).svg\" width=50 height=50/&gt;'\n    elif code_meteo[i]==65 or code_meteo[i]==66: \n        return f'&lt;div style=\"text-align: center;\"&gt;&lt;img src=\"imagemeteo/pluie_forte.svg\" width=50 height=50/&gt;'\n    elif code_meteo[i]==71 or code_meteo[i]==73 or code_meteo[i]==75:\n        return f'&lt;div style=\"text-align: center;\"&gt;&lt;img src=\"imagemeteo/neige.svg\" width=50 height=50/&gt;'\n    elif code_meteo[i]==80 or code_meteo[i]==81 or code_meteo[i]==82:\n        return f'&lt;div style=\"text-align: center;\"&gt;&lt;img src=\"imagemeteo/averse.svg\" width=50 height=50/&gt;'\n    elif code_meteo[i]==95:\n        return f'&lt;div style=\"text-align: center;\"&gt;&lt;img src=\"imagemeteo/orage(2).svg\" width=50 height=50/&gt;'\n    elif code_meteo[i]==96 or code_meteo[i]==99:\n        return f'&lt;div style=\"text-align: center;\"&gt;&lt;img src=\"imagemeteo/grele.svg\" width=50 height=50/&gt;'\n    else:\n        return f\"image non trouvée\"\n#Créez une liste des icones \nicone=[get_weather_image(i) for i in range(min_length)]\n\n# Créez un DataFrame pour l'affichage avec la date et le jour de la semaine dans une seule colonne\ndf_display = pd.DataFrame({\n    'Date': [f'{date.strftime(\"%d/%m/%Y\")}- {jour}' for date, jour in zip(pd.date_range(date_debut_str, periods=min_length).date, jours_semaine)],\n    'Icone': icone,\n     'Température Maximale': [f'{tempmax} °C' for tempmax in tempmax],\n     'Température Minimale': [f'{tempmin} °C' for tempmin in tempmin],\n     'Lever du Soleil': sunrise,\n     'Vitesse du Vent Maximale': [f'{windspeed} km/h' for windspeed in windspeed],\n     'Coucher du Soleil': sunset,\n     'Précipitation': [f'{rain} mm' for rain in rain]\n})\n\n# Effectuez la transposition du DataFrame pour échanger les lignes et les colonnes\ndf_display_transposed = df_display.T\n\n# Générez le code HTML du tableau avec la date et le jour de la semaine\ntable_html = df_display_transposed.to_html(classes=['table'], escape=False, header=False)\n\n# Affichez le tableau en tant que HTML\ndisplay(HTML(table_html))\n\n\n\n\n\nDate\n01/07/2024- Lundi\n02/07/2024- Mardi\n03/07/2024- Mercredi\n04/07/2024- Jeudi\n05/07/2024- Vendredi\n\n\nIcone\nimage non trouvée\nimage non trouvée\nimage non trouvée\nimage non trouvée\nimage non trouvée\n\n\nTempérature Maximale\nnan °C\nnan °C\nnan °C\nnan °C\nnan °C\n\n\nTempérature Minimale\nnan °C\nnan °C\nnan °C\nnan °C\nnan °C\n\n\nLever du Soleil\n08:29\n08:30\n08:31\n08:33\n08:34\n\n\nVitesse du Vent Maximale\nNone km/h\nNone km/h\nNone km/h\nNone km/h\nNone km/h\n\n\nCoucher du Soleil\n18:27\n18:26\n18:24\n18:23\n18:22\n\n\nPrécipitation\n- mm\n- mm\n- mm\n- mm\n- mm\n\n\n\n\n\n\n\n\n Back to top"
  }
]