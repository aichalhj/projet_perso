[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Prévisions Météo",
    "section": "",
    "text": "Vous retrouverez ici, la météo de la ville de Montpellier du jour et des quatres prochains jours.\n\n\nCode\nimport requests\nimport json\nfrom PIL import Image\nimport pandas as pd\nimport datetime\nfrom IPython.display import Markdown\nfrom IPython.display import HTML\nfrom IPython.display import display\nimport numpy as np\n\n\n#Obtenez la date actuelle.\ndate_actuelle = datetime.date.today()\n\n# Calculez la date de fin (5 jours à partir de la date actuelle).\ndate_fin = date_actuelle + datetime.timedelta(days=5)\n\n# Formattez les dates au format AAAA-MM-JJ.\ndate_debut_str = date_actuelle.strftime('%Y-%m-%d')\ndate_fin_str = date_fin.strftime('%Y-%m-%d')\n\n# Construisez l'URL avec les dates mises à jour.\nbase_url = 'https://api.open-meteo.com/v1/meteofrance?latitude=43.6109&longitude=3.8763&current=temperature_2m,rain&hourly=temperature_2m,relativehumidity_2m,precipitation,snowfall,windspeed_10m&daily=weathercode,sunrise,sunset&timezone=Europe%2FBerlin&start_date=2023-10-31&end_date=2023-11-04'\nmeteo_url = f'{base_url}&start_date={date_debut_str}&end_date={date_fin_str}'\n\nresponse = requests.get(meteo_url)\n\nif response.status_code == 200:\n    data = response.json()\n    #Création Dataframe\n    df_data=pd.DataFrame(data)\n    pd.set_option('display.max_rows',None)\n    #Création d'un CSV associé\n    df_data.to_csv('df_data.csv',index=False)\n    #Extraction des données\n    temp = data[0]['hourly']['temperature_2m']\n    windspeed = data[0]['hourly']['windspeed_10m']\n    sunset = data[0]['daily']['sunset']\n    rain = data[0]['hourly']['precipitation']\n    sunrise = data[0]['daily']['sunrise']\n    humidity = data[0]['hourly']['relativehumidity_2m']\n    snow=data[0]['hourly']['snowfall']\n# Formatez les dates de sunrise et sunset au format '%H:%M'\nfor i in range (5):\n    sunrise[i] = datetime.datetime.strptime(data[0]['daily']['sunrise'][i], '%Y-%m-%dT%H:%M').strftime('%H:%M')\n    sunset[i] = datetime.datetime.strptime(data[0]['daily']['sunset'][i], '%Y-%m-%dT%H:%M').strftime('%H:%M')\n\n\ntabtemp= np.zeros((5,24))\nk=0\nfor i in range (5):\n    for j in range(24):\n        tabtemp[i,j]=temp[k]\n        k+=1\ntempmin=np.zeros(5)\ntempmax=np.zeros(5)\nfor i in range (5):\n    tempmin[i]=min(tabtemp[i])\n    tempmax[i]=max(tabtemp[i])\n\nmin_length = min(len(tempmax), len(tempmin), len(windspeed), len(sunrise), len(sunset))\ntempmax = tempmax[:min_length]\ntempmin = tempmin[:min_length]\nwindspeed = windspeed[:min_length]\nsunset = sunset[:min_length]\nrain=rain[:min_length]\nsunrise=sunrise[:min_length]\n\ndef inttoday(i):\n    if ((datetime.datetime.now().weekday()+ i)%7 ==0):\n        return 'Lundi'\n    elif ((datetime.datetime.now().weekday()+ i)%7 ==1):\n        return 'Mardi'\n    elif ((datetime.datetime.now().weekday()+ i)%7 ==2):\n        return 'Mercredi'\n    elif ((datetime.datetime.now().weekday()+ i)%7 ==3):\n        return 'Jeudi'\n    elif ((datetime.datetime.now().weekday()+ i)%7 ==4):\n        return 'Vendredi'\n    elif ((datetime.datetime.now().weekday()+ i)%7 ==5):\n        return 'Samedi'\n    else:\n        return 'Dimanche'\ninttoday(i)\n\n# Créez une liste des jours de la semaine correspondant à chaque date\njours_semaine = [inttoday(i) for i in range(min_length)]\n\ncode_meteo = data[0]['daily']['weathercode']\nprint(code_meteo)\n#Code Météo\n\n\ncondition_image = {\n    0: {'condition': 'Ciel dégagé', 'image': 'sun.svg'},\n    1: {'condition': 'Ciel dégagé', 'image': 'sun.svg'},\n    2: {'condition': 'Ciel partiellement nuageux', 'image': 'Nuageux.svg'},\n    3: {'condition': 'Ciel couvert', 'image': 'couvert.svg'},\n    45: {'condition': 'Brouillard', 'image': 'brouillard.svg'},\n    48: {'condition': 'Brouillard givré', 'image': 'brouillard.svg'},\n    51: {'condition': 'Bruine : Intensité légère', 'image': 'bruine.svg'},\n    53: {'condition': 'Bruine : Intensité modérée', 'image': 'bruine.svg'},\n    55: {'condition': 'Bruine : Intensité dense', 'image': 'bruine.svg'},\n    56: {'condition': 'Bruine verglaçante : Intensité légère', 'image': 'bruine_verglaçante.svg'},\n    57: {'condition': 'Bruine verglaçante : Intensité dense', 'image': 'bruine_verglaçante.svg'},\n    61: {'condition': 'Pluie légère', 'image': 'pluie_legere.svg'},\n    63: {'condition': 'Pluie modérée', 'image': 'pluie_moderee.svg'},\n    65: {'condition': 'Pluie forte', 'image': 'pluie_forte.svg'},\n    66: {'condition': 'Pluie verglaçante', 'image': 'pluie_forte.svg'},\n    71: {'condition': 'Neige', 'image': 'neige.svg'},\n    73: {'condition': 'Neige', 'image': 'neige.svg'},\n    75: {'condition': 'Neige', 'image': 'neige.svg'},\n    80: {'condition': 'Averse légère', 'image': 'averse_legere.svg'},\n    81: {'condition': 'Averse moyenne', 'image': 'averse_moyen.svg'},\n    82: {'condition': 'Averse forte', 'image': 'averse_forte.svg'},\n    95: {'condition': 'Orage', 'image': 'orage.svg'},\n    96: {'condition': 'Orage et grêle', 'image': 'grele.svg'},\n    99: {'condition': 'Orage et grêle', 'image': 'grele.svg'}\n}\n\ndef get_weather_image(i):\n    if code_meteo[i]==0 or code_meteo[i]==1:\n        return f'&lt;img src=\"imagemeteo/soleil(2).svg\"  width=50 height=50/&gt;'\n    elif code_meteo[i]==2 or code_meteo[i]==3:\n        return f'&lt;img src=\"imagemeteo/couvert.svg\" width=50 height=50/&gt;'\n    elif code_meteo[i]==45 or code_meteo[i]==48: \n        return f'&lt;img src=\"imagemeteo/brouillard.svg\" width=50 height=50/&gt;'\n    elif code_meteo[i]==51 or code_meteo[i]==53 or code_meteo[i]==55 or code_meteo[i]==56  or code_meteo[i]==57: \n        return f'&lt;img src=\"imagemeteo/bruine.svg\" width=50 height=50/&gt;'\n    elif code_meteo[i]==61 or code_meteo[i]==63: \n        return f'&lt;img src=\"imagemeteo/rain.svg\" width=50 height=50/&gt;'\n    elif code_meteo[i]==65 or code_meteo[i]==66: \n        return f'&lt;img src=\"imagemeteo/pluie_forte.svg\" width=50 height=50/&gt;'\n    elif code_meteo[i]==71 or code_meteo[i]==73 or code_meteo[i]==75:\n        return f'&lt;img src=\"imagemeteo/neige.svg\" width=50 height=50/&gt;'\n    elif code_meteo[i]==80 or code_meteo[i]==81 or code_meteo[i]==82:\n        return f'&lt;img src=\"imagemeteo/averse.svg\" width=50 height=50/&gt;'\n    elif code_meteo[i]==95:\n        return f'&lt;img src=\"imagemeteo/orage(2).svg\" width=50 height=50/&gt;'\n    elif code_meteo[i]==96 or code_meteo[i]==99:\n        return f'&lt;img src=\"imagemeteo/grele.svg\" width=50 height=50/&gt;'\n    else:\n        return f\"image non trouvée\"\n\nicone=[get_weather_image(i) for i in range(min_length)]\n\n# Créez un DataFrame pour l'affichage avec la date et le jour de la semaine dans une seule colonne\ndf_display = pd.DataFrame({\n    'Date': [f'{date.strftime(\"%d/%m/%Y\")}- {jour}' for date, jour in zip(pd.date_range(date_debut_str, periods=min_length).date, jours_semaine)],\n    'Icone': icone,\n     'Température Maximale': [f'{tempmax} °C' for tempmax in tempmax],\n     'Température Minimale': [f'{tempmin} °C' for tempmin in tempmin],\n     'Lever du Soleil': sunrise,\n     'Vitesse du Vent Maximale': [f'{windspeed} km/h' for windspeed in windspeed],\n     'Coucher du Soleil': sunset,\n     'Précipitation': [f'{rain} mm' for rain in rain]\n})\n\n# Effectuez la transposition du DataFrame pour échanger les lignes et les colonnes\ndf_display_transposed = df_display.T\n\n# Générez le code HTML du tableau avec la date et le jour de la semaine\ntable_html = df_display_transposed.to_html(classes=['table'], escape=False, header=False)\n\n# Affichez le tableau en tant que HTML\ndisplay(HTML(table_html))\n\n\n[3, 3, 61, 61, 53]\n\n\n\n\n\nDate\n05/11/2023- Dimanche\n06/11/2023- Lundi\n07/11/2023- Mardi\n08/11/2023- Mercredi\n09/11/2023- Jeudi\n\n\nIcone\n\n\n\n\n\n\n\nTempérature Maximale\n19.1 °C\n19.5 °C\n16.9 °C\n13.8 °C\n15.4 °C\n\n\nTempérature Minimale\n10.7 °C\n9.9 °C\n11.2 °C\n8.6 °C\n8.4 °C\n\n\nLever du Soleil\n07:18\n07:19\n07:21\n07:22\n07:23\n\n\nVitesse du Vent Maximale\n11.2 km/h\n14.4 km/h\n14.3 km/h\n14.0 km/h\n7.1 km/h\n\n\nCoucher du Soleil\n17:37\n17:36\n17:34\n17:33\n17:32\n\n\nPrécipitation\n0.0 mm\n0.0 mm\n0.0 mm\n0.0 mm\n0.0 mm\n\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n\nCode\nimport requests\nimport json\nfrom PIL import Image\nimport pandas as pd\nimport datetime\n#from IPython.display import Markdown\nimport numpy as np\n\n\n#Obtenez la date actuelle.\ndate_actuelle = datetime.date.today()\n\n# Calculez la date de fin (5 jours à partir de la date actuelle).\ndate_fin = date_actuelle + datetime.timedelta(days=5)\n\n# Formattez les dates au format AAAA-MM-JJ.\ndate_debut_str = date_actuelle.strftime('%Y-%m-%d')\ndate_fin_str = date_fin.strftime('%Y-%m-%d')\n\n# Construisez l'URL avec les dates mises à jour.\nbase_url = 'https://api.open-meteo.com/v1/meteofrance?latitude=43.6109&longitude=3.8763&hourly=temperature_2m,relativehumidity_2m,precipitation,rain,snowfall,weathercode,windspeed_10m&daily=sunrise,sunset&timezone=Europe%2FBerlin&start_date=2023-10-30&end_date=2023-11-03'\nmeteo_url = f'{base_url}&start_date={date_debut_str}&end_date={date_fin_str}'\n\nresponse = requests.get(meteo_url)\n\nif response.status_code == 200:\n    data = response.json()\n    # Traitement des données ici\n    print('Données météo mises à jour avec succès.',data)\n    #Création Dataframe\n    df_data=pd.DataFrame(data)\n    pd.set_option('display.max_rows',None)\n    #Création d'un CSV associé\n    df_data.to_csv('df_data.csv',index=False)\n    #Extraction des données\n    temp = data[0]['hourly']['temperature_2m']\n    windspeed = data[0]['hourly']['windspeed_10m']\n    sunset = data[0]['daily']['sunset']\n    rain = data[0]['hourly']['precipitation']\n    sunrise = data[0]['daily']['sunrise']\n    humidity = data[0]['hourly']['relativehumidity_2m']\n    snow=data[0]['hourly']['snowfall']\n    \nprint(\"la taille est de \",len(temp))\ntabtemp= np.zeros((5,24))\nk=0\nfor i in range (5):\n    for j in range(24):\n        tabtemp[i,j]=temp[k]\n        k+=1\ntempmin=np.zeros(5)\ntempmax=np.zeros(5)\nfor i in range (5):\n    tempmin[i]=min(tabtemp[i])\n    tempmax[i]=max(tabtemp[i])\nprint('les températures maxiamals sont,',tempmax)\nprint('les températures minimals sont,',tempmin)\n\nmin_length = min(len(tempmax), len(tempmin), len(windspeed), len(sunrise), len(sunset))\ntempmax = tempmax[:min_length]\ntempmin = tempmin[:min_length]\nwindspeed = windspeed[:min_length]\nsunset = sunset[:min_length]\nrain=rain[:min_length]\nsunrise=sunrise[:min_length]\n        \ndf = pd.DataFrame ({\n\"Date\": [date_debut_str]*min_length,\n\"Température Maximale (°C)\": tempmax,\n\"Température Minimale (°C)\": tempmin,\n\"Lever du Soleil\": sunrise,\n\"Vitesse du Vent Maximale (km/h)\": windspeed,\n\"Coucher du Soleil\": sunset,\n\"Précipitation (mm)\": rain })\nprint(df)\n\n\nDonnées météo mises à jour avec succès. [{'latitude': 43.61, 'longitude': 3.88, 'generationtime_ms': 0.5820989608764648, 'utc_offset_seconds': 3600, 'timezone': 'Europe/Berlin', 'timezone_abbreviation': 'CET', 'elevation': 58.0, 'hourly_units': {'time': 'iso8601', 'temperature_2m': '°C', 'relativehumidity_2m': '%', 'precipitation': 'mm', 'snowfall': 'cm', 'weathercode': 'wmo code', 'windspeed_10m': 'km/h'}, 'hourly': {'time': ['2023-10-30T00:00', '2023-10-30T01:00', '2023-10-30T02:00', '2023-10-30T03:00', '2023-10-30T04:00', '2023-10-30T05:00', '2023-10-30T06:00', '2023-10-30T07:00', '2023-10-30T08:00', '2023-10-30T09:00', '2023-10-30T10:00', '2023-10-30T11:00', '2023-10-30T12:00', '2023-10-30T13:00', '2023-10-30T14:00', '2023-10-30T15:00', '2023-10-30T16:00', '2023-10-30T17:00', '2023-10-30T18:00', '2023-10-30T19:00', '2023-10-30T20:00', '2023-10-30T21:00', '2023-10-30T22:00', '2023-10-30T23:00', '2023-10-31T00:00', '2023-10-31T01:00', '2023-10-31T02:00', '2023-10-31T03:00', '2023-10-31T04:00', '2023-10-31T05:00', '2023-10-31T06:00', '2023-10-31T07:00', '2023-10-31T08:00', '2023-10-31T09:00', '2023-10-31T10:00', '2023-10-31T11:00', '2023-10-31T12:00', '2023-10-31T13:00', '2023-10-31T14:00', '2023-10-31T15:00', '2023-10-31T16:00', '2023-10-31T17:00', '2023-10-31T18:00', '2023-10-31T19:00', '2023-10-31T20:00', '2023-10-31T21:00', '2023-10-31T22:00', '2023-10-31T23:00', '2023-11-01T00:00', '2023-11-01T01:00', '2023-11-01T02:00', '2023-11-01T03:00', '2023-11-01T04:00', '2023-11-01T05:00', '2023-11-01T06:00', '2023-11-01T07:00', '2023-11-01T08:00', '2023-11-01T09:00', '2023-11-01T10:00', '2023-11-01T11:00', '2023-11-01T12:00', '2023-11-01T13:00', '2023-11-01T14:00', '2023-11-01T15:00', '2023-11-01T16:00', '2023-11-01T17:00', '2023-11-01T18:00', '2023-11-01T19:00', '2023-11-01T20:00', '2023-11-01T21:00', '2023-11-01T22:00', '2023-11-01T23:00', '2023-11-02T00:00', '2023-11-02T01:00', '2023-11-02T02:00', '2023-11-02T03:00', '2023-11-02T04:00', '2023-11-02T05:00', '2023-11-02T06:00', '2023-11-02T07:00', '2023-11-02T08:00', '2023-11-02T09:00', '2023-11-02T10:00', '2023-11-02T11:00', '2023-11-02T12:00', '2023-11-02T13:00', '2023-11-02T14:00', '2023-11-02T15:00', '2023-11-02T16:00', '2023-11-02T17:00', '2023-11-02T18:00', '2023-11-02T19:00', '2023-11-02T20:00', '2023-11-02T21:00', '2023-11-02T22:00', '2023-11-02T23:00', '2023-11-03T00:00', '2023-11-03T01:00', '2023-11-03T02:00', '2023-11-03T03:00', '2023-11-03T04:00', '2023-11-03T05:00', '2023-11-03T06:00', '2023-11-03T07:00', '2023-11-03T08:00', '2023-11-03T09:00', '2023-11-03T10:00', '2023-11-03T11:00', '2023-11-03T12:00', '2023-11-03T13:00', '2023-11-03T14:00', '2023-11-03T15:00', '2023-11-03T16:00', '2023-11-03T17:00', '2023-11-03T18:00', '2023-11-03T19:00', '2023-11-03T20:00', '2023-11-03T21:00', '2023-11-03T22:00', '2023-11-03T23:00'], 'temperature_2m': [19.0, 19.8, 19.4, 19.0, 18.7, 18.6, 18.5, 18.7, 18.8, 19.2, 19.7, 20.4, 20.6, 19.0, 19.5, 19.5, 19.2, 17.0, 16.9, 15.1, 14.8, 14.7, 14.4, 14.5, 13.9, 12.1, 12.2, 11.6, 11.2, 11.0, 11.4, 11.7, 11.4, 13.0, 14.8, 16.3, 17.0, 17.6, 18.1, 18.3, 18.3, 18.1, 17.1, 15.4, 14.5, 13.3, 12.8, 12.1, 11.8, 11.2, 11.8, 11.4, 11.5, 11.8, 11.9, 12.0, 12.1, 12.8, 13.3, 14.9, 16.4, 17.6, 17.8, 19.0, 19.5, 18.4, 17.3, 15.9, 11.8, 11.2, 10.7, 10.5, 10.6, 10.8, 11.0, 11.2, 11.6, 11.8, 11.8, 12.0, 12.4, 13.3, 13.8, 14.1, 14.7, 15.2, 14.3, 13.9, 12.2, 12.4, 11.7, 11.5, 11.0, 11.1, 11.1, 10.9, 10.4, 9.3, 8.7, 8.1, 7.7, 7.4, 6.7, 6.6, 6.7, 7.4, 8.3, 9.8, 10.1, 10.9, 10.5, 10.5, 11.2, 10.9, 10.5, 9.6, 9.7, 9.5, 9.4, 9.7], 'relativehumidity_2m': [84, 77, 83, 88, 88, 88, 88, 86, 87, 86, 84, 81, 76, 73, 83, 84, 86, 76, 60, 69, 74, 69, 61, 58, 63, 73, 72, 77, 78, 79, 77, 74, 76, 71, 66, 61, 59, 57, 54, 51, 51, 53, 54, 65, 68, 72, 74, 77, 77, 78, 72, 76, 76, 74, 74, 77, 77, 76, 76, 73, 71, 69, 69, 63, 57, 50, 55, 61, 74, 77, 81, 83, 84, 87, 94, 97, 95, 93, 94, 96, 97, 92, 90, 89, 89, 86, 74, 71, 89, 82, 79, 78, 72, 72, 71, 71, 71, 75, 78, 82, 84, 88, 91, 87, 90, 93, 93, 88, 89, 82, 82, 84, 71, 70, 67, 73, 76, 78, 78, 76], 'precipitation': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 3.0, 0.3, 0.0, 0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.2, 0.1, 0.1, 1.8, 0.1, 0.9, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.7, 0.9, 0.1, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 'snowfall': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 'weathercode': [3, 3, 0, 3, 3, 3, 3, 2, 3, 3, 3, 3, 3, 3, 51, 3, 3, 63, 51, 3, 53, 3, 3, 3, 0, 0, 0, 3, 3, 0, 0, 0, 0, 0, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 3, 3, 1, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 3, 3, 3, 3, 3, 51, 51, 51, 61, 51, 53, 51, 3, 3, 3, 3, 3, 1, 3, 3, 3, 3, 1, 3, 3, 53, 53, 51, 51, 3, 3, 3, 3, 2, 0, 1, 1, 0, 0, 0], 'windspeed_10m': [23.5, 22.6, 22.2, 21.1, 18.2, 20.2, 18.7, 19.4, 18.9, 23.3, 23.2, 24.8, 26.0, 24.5, 23.2, 29.9, 20.6, 21.4, 11.7, 9.0, 9.5, 11.2, 19.5, 10.1, 11.2, 14.4, 14.3, 14.0, 7.1, 7.1, 9.6, 11.5, 9.5, 9.5, 10.3, 13.0, 14.9, 18.5, 18.6, 17.6, 12.2, 6.6, 6.0, 8.2, 6.6, 7.4, 5.0, 6.9, 5.8, 5.9, 6.3, 6.9, 8.4, 9.2, 8.4, 10.5, 11.4, 13.0, 15.3, 13.6, 14.8, 15.5, 12.6, 11.5, 11.4, 11.5, 5.7, 3.2, 3.0, 5.9, 6.0, 3.9, 4.6, 6.8, 11.3, 14.5, 19.3, 22.1, 24.5, 24.1, 27.3, 28.5, 22.8, 19.1, 14.6, 14.1, 17.4, 18.9, 12.5, 14.6, 21.5, 20.9, 20.5, 20.9, 22.3, 22.4, 19.0, 13.0, 15.9, 11.5, 10.2, 13.8, 8.3, 8.1, 8.3, 5.7, 5.7, 4.4, 9.2, 15.6, 22.2, 17.8, 23.7, 20.2, 21.5, 17.9, 20.3, 16.6, 16.2, 19.8]}, 'daily_units': {'time': 'iso8601', 'sunrise': 'iso8601', 'sunset': 'iso8601'}, 'daily': {'time': ['2023-10-30', '2023-10-31', '2023-11-01', '2023-11-02', '2023-11-03'], 'sunrise': ['2023-10-30T07:17', '2023-10-31T07:18', '2023-11-01T07:19', '2023-11-02T07:21', '2023-11-03T07:22'], 'sunset': ['2023-10-30T17:39', '2023-10-31T17:37', '2023-11-01T17:36', '2023-11-02T17:34', '2023-11-03T17:33']}}, {'latitude': 43.61, 'longitude': 3.88, 'generationtime_ms': 0.6089210510253906, 'utc_offset_seconds': 3600, 'timezone': 'Europe/Berlin', 'timezone_abbreviation': 'CET', 'elevation': 58.0, 'hourly_units': {'time': 'iso8601', 'temperature_2m': '°C', 'relativehumidity_2m': '%', 'precipitation': 'mm', 'snowfall': 'cm', 'weathercode': 'wmo code', 'windspeed_10m': 'km/h'}, 'hourly': {'time': ['2023-10-31T00:00', '2023-10-31T01:00', '2023-10-31T02:00', '2023-10-31T03:00', '2023-10-31T04:00', '2023-10-31T05:00', '2023-10-31T06:00', '2023-10-31T07:00', '2023-10-31T08:00', '2023-10-31T09:00', '2023-10-31T10:00', '2023-10-31T11:00', '2023-10-31T12:00', '2023-10-31T13:00', '2023-10-31T14:00', '2023-10-31T15:00', '2023-10-31T16:00', '2023-10-31T17:00', '2023-10-31T18:00', '2023-10-31T19:00', '2023-10-31T20:00', '2023-10-31T21:00', '2023-10-31T22:00', '2023-10-31T23:00', '2023-11-01T00:00', '2023-11-01T01:00', '2023-11-01T02:00', '2023-11-01T03:00', '2023-11-01T04:00', '2023-11-01T05:00', '2023-11-01T06:00', '2023-11-01T07:00', '2023-11-01T08:00', '2023-11-01T09:00', '2023-11-01T10:00', '2023-11-01T11:00', '2023-11-01T12:00', '2023-11-01T13:00', '2023-11-01T14:00', '2023-11-01T15:00', '2023-11-01T16:00', '2023-11-01T17:00', '2023-11-01T18:00', '2023-11-01T19:00', '2023-11-01T20:00', '2023-11-01T21:00', '2023-11-01T22:00', '2023-11-01T23:00', '2023-11-02T00:00', '2023-11-02T01:00', '2023-11-02T02:00', '2023-11-02T03:00', '2023-11-02T04:00', '2023-11-02T05:00', '2023-11-02T06:00', '2023-11-02T07:00', '2023-11-02T08:00', '2023-11-02T09:00', '2023-11-02T10:00', '2023-11-02T11:00', '2023-11-02T12:00', '2023-11-02T13:00', '2023-11-02T14:00', '2023-11-02T15:00', '2023-11-02T16:00', '2023-11-02T17:00', '2023-11-02T18:00', '2023-11-02T19:00', '2023-11-02T20:00', '2023-11-02T21:00', '2023-11-02T22:00', '2023-11-02T23:00', '2023-11-03T00:00', '2023-11-03T01:00', '2023-11-03T02:00', '2023-11-03T03:00', '2023-11-03T04:00', '2023-11-03T05:00', '2023-11-03T06:00', '2023-11-03T07:00', '2023-11-03T08:00', '2023-11-03T09:00', '2023-11-03T10:00', '2023-11-03T11:00', '2023-11-03T12:00', '2023-11-03T13:00', '2023-11-03T14:00', '2023-11-03T15:00', '2023-11-03T16:00', '2023-11-03T17:00', '2023-11-03T18:00', '2023-11-03T19:00', '2023-11-03T20:00', '2023-11-03T21:00', '2023-11-03T22:00', '2023-11-03T23:00', '2023-11-04T00:00', '2023-11-04T01:00', '2023-11-04T02:00', '2023-11-04T03:00', '2023-11-04T04:00', '2023-11-04T05:00', '2023-11-04T06:00', '2023-11-04T07:00', '2023-11-04T08:00', '2023-11-04T09:00', '2023-11-04T10:00', '2023-11-04T11:00', '2023-11-04T12:00', '2023-11-04T13:00', '2023-11-04T14:00', '2023-11-04T15:00', '2023-11-04T16:00', '2023-11-04T17:00', '2023-11-04T18:00', '2023-11-04T19:00', '2023-11-04T20:00', '2023-11-04T21:00', '2023-11-04T22:00', '2023-11-04T23:00', '2023-11-05T00:00', '2023-11-05T01:00', '2023-11-05T02:00', '2023-11-05T03:00', '2023-11-05T04:00', '2023-11-05T05:00', '2023-11-05T06:00', '2023-11-05T07:00', '2023-11-05T08:00', '2023-11-05T09:00', '2023-11-05T10:00', '2023-11-05T11:00', '2023-11-05T12:00', '2023-11-05T13:00', '2023-11-05T14:00', '2023-11-05T15:00', '2023-11-05T16:00', '2023-11-05T17:00', '2023-11-05T18:00', '2023-11-05T19:00', '2023-11-05T20:00', '2023-11-05T21:00', '2023-11-05T22:00', '2023-11-05T23:00'], 'temperature_2m': [13.9, 12.1, 12.2, 11.6, 11.2, 11.0, 11.4, 11.7, 11.4, 13.0, 14.8, 16.3, 17.0, 17.6, 18.1, 18.3, 18.3, 18.1, 17.1, 15.4, 14.5, 13.3, 12.8, 12.1, 11.8, 11.2, 11.8, 11.4, 11.5, 11.8, 11.9, 12.0, 12.1, 12.8, 13.3, 14.9, 16.4, 17.6, 17.8, 19.0, 19.5, 18.4, 17.3, 15.9, 11.8, 11.2, 10.7, 10.5, 10.6, 10.8, 11.0, 11.2, 11.6, 11.8, 11.8, 12.0, 12.4, 13.3, 13.8, 14.1, 14.7, 15.2, 14.3, 13.9, 12.2, 12.4, 11.7, 11.5, 11.0, 11.1, 11.1, 10.9, 10.4, 9.3, 8.7, 8.1, 7.7, 7.4, 6.7, 6.6, 6.7, 7.4, 8.3, 9.8, 10.1, 10.9, 10.5, 10.5, 11.2, 10.9, 10.5, 9.6, 9.7, 9.5, 9.4, 9.7, 9.7, 9.9, 9.8, 9.1, 8.1, 8.2, 7.7, 8.0, 7.7, 7.7, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], 'relativehumidity_2m': [63, 73, 72, 77, 78, 79, 77, 74, 76, 71, 66, 61, 59, 57, 54, 51, 51, 53, 54, 65, 68, 72, 74, 77, 77, 78, 72, 76, 76, 74, 74, 77, 77, 76, 76, 73, 71, 69, 69, 63, 57, 50, 55, 61, 74, 77, 81, 83, 84, 87, 94, 97, 95, 93, 94, 96, 97, 92, 90, 89, 89, 86, 74, 71, 89, 82, 79, 78, 72, 72, 71, 71, 71, 75, 78, 82, 84, 88, 91, 87, 90, 93, 93, 88, 89, 82, 82, 84, 71, 70, 67, 73, 76, 78, 78, 76, 76, 72, 71, 73, 79, 84, 86, 84, 89, 89, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], 'precipitation': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.2, 0.1, 0.1, 1.8, 0.1, 0.9, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.7, 0.9, 0.1, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], 'snowfall': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], 'weathercode': [0, 0, 0, 3, 3, 0, 0, 0, 0, 0, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 3, 3, 1, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 3, 3, 3, 3, 3, 51, 51, 51, 61, 51, 53, 51, 3, 3, 3, 3, 3, 1, 3, 3, 3, 3, 1, 3, 3, 53, 53, 51, 51, 3, 3, 3, 3, 2, 0, 1, 1, 0, 0, 0, 0, 0, 2, 2, 3, 3, 3, 3, 3, 3, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], 'windspeed_10m': [11.2, 14.4, 14.3, 14.0, 7.1, 7.1, 9.6, 11.5, 9.5, 9.5, 10.3, 13.0, 14.9, 18.5, 18.6, 17.6, 12.2, 6.6, 6.0, 8.2, 6.6, 7.4, 5.0, 6.9, 5.8, 5.9, 6.3, 6.9, 8.4, 9.2, 8.4, 10.5, 11.4, 13.0, 15.3, 13.6, 14.8, 15.5, 12.6, 11.5, 11.4, 11.5, 5.7, 3.2, 3.0, 5.9, 6.0, 3.9, 4.6, 6.8, 11.3, 14.5, 19.3, 22.1, 24.5, 24.1, 27.3, 28.5, 22.8, 19.1, 14.6, 14.1, 17.4, 18.9, 12.5, 14.6, 21.5, 20.9, 20.5, 20.9, 22.3, 22.4, 19.0, 13.0, 15.9, 11.5, 10.2, 13.8, 8.3, 8.1, 8.3, 5.7, 5.7, 4.4, 9.2, 15.6, 22.2, 17.8, 23.7, 20.2, 21.5, 17.9, 20.3, 16.6, 16.2, 19.8, 19.2, 20.5, 20.5, 15.4, 12.5, 15.1, 11.9, 14.2, 2.0, 2.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None]}, 'daily_units': {'time': 'iso8601', 'sunrise': 'iso8601', 'sunset': 'iso8601'}, 'daily': {'time': ['2023-10-31', '2023-11-01', '2023-11-02', '2023-11-03', '2023-11-04', '2023-11-05'], 'sunrise': ['2023-10-31T07:18', '2023-11-01T07:19', '2023-11-02T07:21', '2023-11-03T07:22', '2023-11-04T07:23', '2023-11-05T07:25'], 'sunset': ['2023-10-31T17:37', '2023-11-01T17:36', '2023-11-02T17:34', '2023-11-03T17:33', '2023-11-04T17:32', '2023-11-05T17:31']}}]\nla taille est de  120\nles températures maxiamals sont, [20.6 18.3 19.5 15.2 11.2]\nles températures minimals sont, [14.4 11.  10.5 10.6  6.6]\n         Date  Température Maximale (°C)  Température Minimale (°C)  \\\n0  2023-10-31                       20.6                       14.4   \n1  2023-10-31                       18.3                       11.0   \n2  2023-10-31                       19.5                       10.5   \n3  2023-10-31                       15.2                       10.6   \n4  2023-10-31                       11.2                        6.6   \n\n    Lever du Soleil  Vitesse du Vent Maximale (km/h) Coucher du Soleil  \\\n0  2023-10-30T07:17                             23.5  2023-10-30T17:39   \n1  2023-10-31T07:18                             22.6  2023-10-31T17:37   \n2  2023-11-01T07:19                             22.2  2023-11-01T17:36   \n3  2023-11-02T07:21                             21.1  2023-11-02T17:34   \n4  2023-11-03T07:22                             18.2  2023-11-03T17:33   \n\n   Précipitation (mm)  \n0                 0.0  \n1                 0.0  \n2                 0.0  \n3                 0.0  \n4                 0.0  \n\n\n\n\n\n Back to top"
  }
]